class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxPro = 0; 
        int minPrice = INT_MAX; 
        for(int i=0 ; i<prices.size();++i){
             minPrice = min(minPrice , prices[i] ); // calculates min price till day i by comparing the current element price with minmum price till now
            maxPro = max(maxPro , prices[i] - minPrice); // calculates max profit till day
        } 
        return maxPro;
    }
};
TIME : O(N)
SPACE : O(1)

USING KADANE ALGORITHM IF ARRAY CONTAINS NEGATIVE ELEMENT e.g.{0, 6, -3, 7}

 public int maxProfit(int[] prices) {
        int maxCur = 0, maxSoFar = 0;
        for(int i = 1; i < prices.length; i++) {
            maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
            maxSoFar = Math.max(maxCur, maxSoFar);
        }
        return maxSoFar;
    }
